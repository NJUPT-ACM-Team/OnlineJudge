// Code generated by protoc-gen-go.
// source: api/save_problem.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SaveProblemRequest struct {
	OjName      string           `protobuf:"bytes,1,opt,name=oj_name,json=ojName" json:"oj_name,omitempty"`
	OjPid       string           `protobuf:"bytes,2,opt,name=oj_pid,json=ojPid" json:"oj_pid,omitempty"`
	Title       string           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Description string           `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Input       string           `protobuf:"bytes,5,opt,name=input" json:"input,omitempty"`
	Output      string           `protobuf:"bytes,6,opt,name=output" json:"output,omitempty"`
	SampleIn    string           `protobuf:"bytes,7,opt,name=sample_in,json=sampleIn" json:"sample_in,omitempty"`
	SampleOut   string           `protobuf:"bytes,8,opt,name=sample_out,json=sampleOut" json:"sample_out,omitempty"`
	Source      string           `protobuf:"bytes,9,opt,name=source" json:"source,omitempty"`
	Hint        string           `protobuf:"bytes,10,opt,name=hint" json:"hint,omitempty"`
	Hide        bool             `protobuf:"varint,11,opt,name=hide" json:"hide,omitempty"`
	IsSpj       bool             `protobuf:"varint,12,opt,name=is_spj,json=isSpj" json:"is_spj,omitempty"`
	SpjCode     string           `protobuf:"bytes,13,opt,name=spj_code,json=spjCode" json:"spj_code,omitempty"`
	Limits      []*Problem_Limit `protobuf:"bytes,14,rep,name=limits" json:"limits,omitempty"`
}

func (m *SaveProblemRequest) Reset()                    { *m = SaveProblemRequest{} }
func (m *SaveProblemRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveProblemRequest) ProtoMessage()               {}
func (*SaveProblemRequest) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

func (m *SaveProblemRequest) GetOjName() string {
	if m != nil {
		return m.OjName
	}
	return ""
}

func (m *SaveProblemRequest) GetOjPid() string {
	if m != nil {
		return m.OjPid
	}
	return ""
}

func (m *SaveProblemRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SaveProblemRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SaveProblemRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *SaveProblemRequest) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *SaveProblemRequest) GetSampleIn() string {
	if m != nil {
		return m.SampleIn
	}
	return ""
}

func (m *SaveProblemRequest) GetSampleOut() string {
	if m != nil {
		return m.SampleOut
	}
	return ""
}

func (m *SaveProblemRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SaveProblemRequest) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *SaveProblemRequest) GetHide() bool {
	if m != nil {
		return m.Hide
	}
	return false
}

func (m *SaveProblemRequest) GetIsSpj() bool {
	if m != nil {
		return m.IsSpj
	}
	return false
}

func (m *SaveProblemRequest) GetSpjCode() string {
	if m != nil {
		return m.SpjCode
	}
	return ""
}

func (m *SaveProblemRequest) GetLimits() []*Problem_Limit {
	if m != nil {
		return m.Limits
	}
	return nil
}

type SaveProblemResponse struct {
	MetaPid    int64  `protobuf:"varint,1,opt,name=meta_pid,json=metaPid" json:"meta_pid,omitempty"`
	ProblemSid string `protobuf:"bytes,2,opt,name=problem_sid,json=problemSid" json:"problem_sid,omitempty"`
	Error      *Error `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *SaveProblemResponse) Reset()                    { *m = SaveProblemResponse{} }
func (m *SaveProblemResponse) String() string            { return proto.CompactTextString(m) }
func (*SaveProblemResponse) ProtoMessage()               {}
func (*SaveProblemResponse) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

func (m *SaveProblemResponse) GetMetaPid() int64 {
	if m != nil {
		return m.MetaPid
	}
	return 0
}

func (m *SaveProblemResponse) GetProblemSid() string {
	if m != nil {
		return m.ProblemSid
	}
	return ""
}

func (m *SaveProblemResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*SaveProblemRequest)(nil), "api.SaveProblemRequest")
	proto.RegisterType((*SaveProblemResponse)(nil), "api.SaveProblemResponse")
}

func init() { proto.RegisterFile("api/save_problem.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x92, 0xd1, 0x8a, 0xd4, 0x30,
	0x14, 0x86, 0x19, 0xbb, 0xed, 0xcc, 0x9c, 0xaa, 0x48, 0xd4, 0x35, 0xae, 0x88, 0x65, 0xaf, 0x06,
	0x2f, 0x46, 0x58, 0x1f, 0x41, 0xbc, 0x10, 0x44, 0x97, 0xce, 0x03, 0x94, 0xec, 0xf4, 0xc0, 0x9e,
	0xd0, 0xe4, 0xc4, 0x26, 0x5d, 0x5f, 0xc0, 0x07, 0x97, 0x9c, 0x14, 0x71, 0xef, 0xf2, 0x7f, 0xff,
	0xc9, 0x1f, 0x7a, 0xfe, 0xc2, 0xa5, 0x09, 0xf4, 0x29, 0x9a, 0x07, 0x1c, 0xc2, 0xcc, 0x77, 0x13,
	0xba, 0x63, 0x98, 0x39, 0xb1, 0xaa, 0x4c, 0xa0, 0xab, 0x17, 0xd9, 0x3c, 0xb3, 0x73, 0xec, 0x0b,
	0xbe, 0x2a, 0xe3, 0xf7, 0xfc, 0xfb, 0xf1, 0xf8, 0xf5, 0x9f, 0x0a, 0xd4, 0xc9, 0x3c, 0xe0, 0x6d,
	0xa1, 0x3d, 0xfe, 0x5a, 0x30, 0x26, 0xf5, 0x06, 0xb6, 0x6c, 0x07, 0x6f, 0x1c, 0xea, 0x4d, 0xb7,
	0x39, 0xec, 0xfb, 0x86, 0xed, 0x0f, 0xe3, 0x50, 0xbd, 0x86, 0x86, 0xed, 0x10, 0x68, 0xd4, 0x4f,
	0x84, 0xd7, 0x6c, 0x6f, 0x69, 0x54, 0xaf, 0xa0, 0x4e, 0x94, 0x26, 0xd4, 0x55, 0xa1, 0x22, 0x54,
	0x07, 0xed, 0x88, 0xf1, 0x3c, 0x53, 0x48, 0xc4, 0x5e, 0x5f, 0x88, 0xf7, 0x3f, 0xca, 0xf7, 0xc8,
	0x87, 0x25, 0xe9, 0xba, 0xdc, 0x13, 0xa1, 0x2e, 0xa1, 0xe1, 0x25, 0x65, 0xdc, 0xac, 0x8f, 0x8b,
	0x52, 0xef, 0x60, 0x1f, 0x8d, 0x0b, 0x13, 0x0e, 0xe4, 0xf5, 0x56, 0xac, 0x5d, 0x01, 0xdf, 0xbc,
	0x7a, 0x0f, 0xb0, 0x9a, 0xbc, 0x24, 0xbd, 0x13, 0x77, 0x1d, 0xff, 0x59, 0x32, 0x23, 0x2f, 0xf3,
	0x19, 0xf5, 0xbe, 0x64, 0x16, 0xa5, 0x14, 0x5c, 0xdc, 0x93, 0x4f, 0x1a, 0x84, 0xca, 0xb9, 0xb0,
	0x11, 0x75, 0xdb, 0x6d, 0x0e, 0xbb, 0x5e, 0xce, 0xf9, 0xc3, 0x29, 0x0e, 0x31, 0x58, 0xfd, 0x54,
	0x68, 0x4d, 0xf1, 0x14, 0xac, 0x7a, 0x0b, 0xbb, 0x18, 0xec, 0x70, 0xe6, 0x11, 0xf5, 0x33, 0x89,
	0xd8, 0xc6, 0x60, 0xbf, 0xf0, 0x88, 0xea, 0x23, 0x34, 0x13, 0x39, 0x4a, 0x51, 0x3f, 0xef, 0xaa,
	0x43, 0x7b, 0xa3, 0x8e, 0x26, 0xd0, 0x71, 0x5d, 0xf4, 0xf1, 0x7b, 0xb6, 0xfa, 0x75, 0xe2, 0x3a,
	0xc2, 0xcb, 0x47, 0x2d, 0xc4, 0xc0, 0x3e, 0x62, 0x4e, 0x77, 0x98, 0x8c, 0xec, 0x3b, 0xf7, 0x50,
	0xf5, 0xdb, 0xac, 0xf3, 0xc6, 0x3f, 0x40, 0xbb, 0x36, 0x39, 0xc4, 0x7f, 0x6d, 0xc0, 0x8a, 0x4e,
	0x34, 0xaa, 0x0e, 0x6a, 0x9c, 0x67, 0x9e, 0xa5, 0x92, 0xf6, 0x06, 0xe4, 0xf5, 0xaf, 0x99, 0xf4,
	0xc5, 0xb8, 0x6b, 0xe4, 0x17, 0xf8, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x85, 0xdd, 0xe7, 0x26,
	0x4b, 0x02, 0x00, 0x00,
}
