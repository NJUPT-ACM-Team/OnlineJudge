// Code generated by protoc-gen-go.
// source: api/contest_ranklist.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContestRanklistRequest struct {
	ContestId int64  `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	RankType  string `protobuf:"bytes,2,opt,name=rank_type,json=rankType" json:"rank_type,omitempty"`
}

func (m *ContestRanklistRequest) Reset()                    { *m = ContestRanklistRequest{} }
func (m *ContestRanklistRequest) String() string            { return proto.CompactTextString(m) }
func (*ContestRanklistRequest) ProtoMessage()               {}
func (*ContestRanklistRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *ContestRanklistRequest) GetContestId() int64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *ContestRanklistRequest) GetRankType() string {
	if m != nil {
		return m.RankType
	}
	return ""
}

type RankICPC struct {
	Labels []string            `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	Lines  []*RankICPC_PerLine `protobuf:"bytes,2,rep,name=lines" json:"lines,omitempty"`
}

func (m *RankICPC) Reset()                    { *m = RankICPC{} }
func (m *RankICPC) String() string            { return proto.CompactTextString(m) }
func (*RankICPC) ProtoMessage()               {}
func (*RankICPC) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RankICPC) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *RankICPC) GetLines() []*RankICPC_PerLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

type RankICPC_PerLine struct {
	Rank      int32                      `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Username  string                     `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	AcNum     int32                      `protobuf:"varint,3,opt,name=ac_num,json=acNum" json:"ac_num,omitempty"`
	TotalMins int64                      `protobuf:"varint,4,opt,name=total_mins,json=totalMins" json:"total_mins,omitempty"`
	Cols      []*RankICPC_PerLine_Column `protobuf:"bytes,5,rep,name=cols" json:"cols,omitempty"`
}

func (m *RankICPC_PerLine) Reset()                    { *m = RankICPC_PerLine{} }
func (m *RankICPC_PerLine) String() string            { return proto.CompactTextString(m) }
func (*RankICPC_PerLine) ProtoMessage()               {}
func (*RankICPC_PerLine) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1, 0} }

func (m *RankICPC_PerLine) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RankICPC_PerLine) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RankICPC_PerLine) GetAcNum() int32 {
	if m != nil {
		return m.AcNum
	}
	return 0
}

func (m *RankICPC_PerLine) GetTotalMins() int64 {
	if m != nil {
		return m.TotalMins
	}
	return 0
}

func (m *RankICPC_PerLine) GetCols() []*RankICPC_PerLine_Column {
	if m != nil {
		return m.Cols
	}
	return nil
}

type RankICPC_PerLine_Column struct {
	Label   string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Minutes int64  `protobuf:"varint,2,opt,name=minutes" json:"minutes,omitempty"`
	Attempt int32  `protobuf:"varint,3,opt,name=attempt" json:"attempt,omitempty"`
	IsFb    bool   `protobuf:"varint,4,opt,name=is_fb,json=isFb" json:"is_fb,omitempty"`
	IsAc    bool   `protobuf:"varint,5,opt,name=is_ac,json=isAc" json:"is_ac,omitempty"`
}

func (m *RankICPC_PerLine_Column) Reset()                    { *m = RankICPC_PerLine_Column{} }
func (m *RankICPC_PerLine_Column) String() string            { return proto.CompactTextString(m) }
func (*RankICPC_PerLine_Column) ProtoMessage()               {}
func (*RankICPC_PerLine_Column) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1, 0, 0} }

func (m *RankICPC_PerLine_Column) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *RankICPC_PerLine_Column) GetMinutes() int64 {
	if m != nil {
		return m.Minutes
	}
	return 0
}

func (m *RankICPC_PerLine_Column) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *RankICPC_PerLine_Column) GetIsFb() bool {
	if m != nil {
		return m.IsFb
	}
	return false
}

func (m *RankICPC_PerLine_Column) GetIsAc() bool {
	if m != nil {
		return m.IsAc
	}
	return false
}

type ContestRanklistResponse struct {
	RankIcpc *RankICPC `protobuf:"bytes,1,opt,name=rank_icpc,json=rankIcpc" json:"rank_icpc,omitempty"`
	Error    *Error    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ContestRanklistResponse) Reset()                    { *m = ContestRanklistResponse{} }
func (m *ContestRanklistResponse) String() string            { return proto.CompactTextString(m) }
func (*ContestRanklistResponse) ProtoMessage()               {}
func (*ContestRanklistResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *ContestRanklistResponse) GetRankIcpc() *RankICPC {
	if m != nil {
		return m.RankIcpc
	}
	return nil
}

func (m *ContestRanklistResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ContestRanklistRequest)(nil), "api.ContestRanklistRequest")
	proto.RegisterType((*RankICPC)(nil), "api.RankICPC")
	proto.RegisterType((*RankICPC_PerLine)(nil), "api.RankICPC.PerLine")
	proto.RegisterType((*RankICPC_PerLine_Column)(nil), "api.RankICPC.PerLine.Column")
	proto.RegisterType((*ContestRanklistResponse)(nil), "api.ContestRanklistResponse")
}

func init() { proto.RegisterFile("api/contest_ranklist.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xdf, 0x8a, 0xd4, 0x30,
	0x18, 0xc5, 0x99, 0x69, 0xd3, 0x6d, 0xbf, 0x41, 0x90, 0xe8, 0xae, 0xa1, 0x2a, 0x94, 0xb9, 0x2a,
	0x0a, 0x55, 0xc6, 0x27, 0x90, 0xa2, 0x30, 0xa0, 0xb2, 0x84, 0xbd, 0x2f, 0x69, 0x36, 0x4a, 0xb0,
	0xf9, 0x63, 0x93, 0x5e, 0x0c, 0xf8, 0x2e, 0x3e, 0xa3, 0x6f, 0x20, 0x49, 0x5a, 0x41, 0xdc, 0xbb,
	0x9e, 0x93, 0x93, 0x7c, 0xbf, 0xc3, 0x57, 0xa8, 0x99, 0x95, 0x6f, 0xb8, 0xd1, 0x5e, 0x38, 0x3f,
	0xcc, 0x4c, 0x7f, 0x9f, 0xa4, 0xf3, 0x9d, 0x9d, 0x8d, 0x37, 0x38, 0x63, 0x56, 0xd6, 0x8f, 0x53,
	0x40, 0x29, 0xa3, 0x93, 0x7d, 0xbc, 0x83, 0x9b, 0x3e, 0x5d, 0xa0, 0x6b, 0x9e, 0x8a, 0x1f, 0x8b,
	0x70, 0x1e, 0xbf, 0x04, 0xd8, 0x9e, 0x92, 0xf7, 0x64, 0xd7, 0xec, 0xda, 0x8c, 0x56, 0xab, 0x73,
	0xbe, 0xc7, 0xcf, 0xa1, 0x0a, 0x13, 0x06, 0x7f, 0xb1, 0x82, 0xec, 0x9b, 0x5d, 0x5b, 0xd1, 0x32,
	0x18, 0x77, 0x17, 0x2b, 0x8e, 0xbf, 0xf7, 0x50, 0x86, 0xf7, 0xce, 0xfd, 0x6d, 0x8f, 0x6f, 0xa0,
	0x98, 0xd8, 0x28, 0x26, 0x47, 0x76, 0x4d, 0xd6, 0x56, 0x74, 0x55, 0xf8, 0x35, 0xa0, 0x49, 0x6a,
	0xe1, 0xc8, 0xbe, 0xc9, 0xda, 0xc3, 0xe9, 0xba, 0x63, 0x56, 0x76, 0xdb, 0xad, 0xee, 0x56, 0xcc,
	0x9f, 0xa4, 0x16, 0x34, 0x65, 0xea, 0x5f, 0x7b, 0xb8, 0x5a, 0x2d, 0x8c, 0x21, 0x0f, 0x93, 0x22,
	0x13, 0xa2, 0xf1, 0x1b, 0xd7, 0x50, 0x2e, 0x4e, 0xcc, 0x9a, 0xa9, 0xbf, 0x34, 0x9b, 0xc6, 0xd7,
	0x50, 0x30, 0x3e, 0xe8, 0x45, 0x91, 0x2c, 0xde, 0x40, 0x8c, 0x7f, 0x59, 0x54, 0x28, 0xe8, 0x8d,
	0x67, 0xd3, 0xa0, 0xa4, 0x76, 0x24, 0x4f, 0x05, 0xa3, 0xf3, 0x59, 0x6a, 0x87, 0xdf, 0x42, 0xce,
	0xcd, 0xe4, 0x08, 0x8a, 0x74, 0x2f, 0x1e, 0xa4, 0xeb, 0x7a, 0x33, 0x2d, 0x4a, 0xd3, 0x98, 0xac,
	0x7f, 0x42, 0x91, 0x34, 0x7e, 0x0a, 0x28, 0x96, 0x8c, 0x88, 0x15, 0x4d, 0x02, 0x13, 0xb8, 0x52,
	0x52, 0x2f, 0x3e, 0x56, 0x0e, 0xd3, 0x36, 0x19, 0x4e, 0x98, 0xf7, 0x42, 0x59, 0xbf, 0x22, 0x6e,
	0x12, 0x3f, 0x01, 0x24, 0xdd, 0xf0, 0x75, 0x8c, 0x7c, 0x25, 0xcd, 0xa5, 0xfb, 0x38, 0xae, 0x26,
	0xe3, 0x04, 0x6d, 0xe6, 0x7b, 0x7e, 0xfc, 0x06, 0xcf, 0xfe, 0xdb, 0xa4, 0xb3, 0x46, 0x3b, 0x81,
	0x5f, 0xad, 0xbb, 0x92, 0xdc, 0xf2, 0x88, 0x74, 0x38, 0x3d, 0xfa, 0xa7, 0x4f, 0x5a, 0xdd, 0x99,
	0x5b, 0x8e, 0x1b, 0x40, 0x62, 0x9e, 0xcd, 0x1c, 0x11, 0x0f, 0x27, 0x88, 0xb9, 0x0f, 0xc1, 0xa1,
	0xe9, 0x60, 0x2c, 0xe2, 0x9f, 0xf3, 0xee, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x48, 0x35,
	0xb3, 0x6e, 0x02, 0x00, 0x00,
}
