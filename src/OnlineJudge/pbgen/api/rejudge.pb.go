// Code generated by protoc-gen-go.
// source: api/rejudge.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReJudgeRequest struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *ReJudgeRequest) Reset()                    { *m = ReJudgeRequest{} }
func (m *ReJudgeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReJudgeRequest) ProtoMessage()               {}
func (*ReJudgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

func (m *ReJudgeRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

type ReJudgeResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ReJudgeResponse) Reset()                    { *m = ReJudgeResponse{} }
func (m *ReJudgeResponse) String() string            { return proto.CompactTextString(m) }
func (*ReJudgeResponse) ProtoMessage()               {}
func (*ReJudgeResponse) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{1} }

func (m *ReJudgeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReJudgeResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ReJudgeRequest)(nil), "api.ReJudgeRequest")
	proto.RegisterType((*ReJudgeResponse)(nil), "api.ReJudgeResponse")
}

func init() { proto.RegisterFile("api/rejudge.proto", fileDescriptor17) }

var fileDescriptor17 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2f, 0x4a, 0xcd, 0x2a, 0x4d, 0x49, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e,
	0x2c, 0xc8, 0x94, 0x12, 0x00, 0x89, 0x27, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0x41, 0x84, 0x95, 0xd4,
	0xb9, 0xf8, 0x82, 0x52, 0xbd, 0x40, 0xea, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44,
	0xb9, 0xd8, 0x8a, 0x4a, 0xf3, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x58,
	0x8b, 0x4a, 0xf3, 0x3c, 0x53, 0x94, 0x7c, 0xb9, 0xf8, 0xe1, 0x0a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0x24, 0xb8, 0xd8, 0x8b, 0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0xc1, 0x4a, 0x39, 0x82,
	0x60, 0x5c, 0x21, 0x05, 0x2e, 0xd6, 0xd4, 0xa2, 0xa2, 0xfc, 0x22, 0x09, 0x26, 0x05, 0x46, 0x0d,
	0x6e, 0x23, 0x2e, 0xbd, 0xc4, 0x82, 0x4c, 0x3d, 0x57, 0x90, 0x48, 0x10, 0x44, 0x22, 0x89, 0x0d,
	0x6c, 0xbd, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xa3, 0x5d, 0xce, 0xaa, 0x00, 0x00, 0x00,
}
