// Code generated by protoc-gen-go.
// source: rpc/daemon.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc/daemon.proto

It has these top-level messages:
	GetTestingDataRequest
	GetTestingDataResponse
	StartJudgingRequest
	StartJudgingResponse
	RegisterRequest
	RegisterResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetTestingDataRequest struct {
	OnlyHash bool  `protobuf:"varint,1,opt,name=only_hash,json=onlyHash" json:"only_hash,omitempty"`
	LocalPid int64 `protobuf:"varint,2,opt,name=local_pid,json=localPid" json:"local_pid,omitempty"`
}

func (m *GetTestingDataRequest) Reset()                    { *m = GetTestingDataRequest{} }
func (m *GetTestingDataRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTestingDataRequest) ProtoMessage()               {}
func (*GetTestingDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetTestingDataRequest) GetOnlyHash() bool {
	if m != nil {
		return m.OnlyHash
	}
	return false
}

func (m *GetTestingDataRequest) GetLocalPid() int64 {
	if m != nil {
		return m.LocalPid
	}
	return 0
}

type GetTestingDataResponse struct {
	Cases []*GetTestingDataResponse_Case `protobuf:"bytes,1,rep,name=cases" json:"cases,omitempty"`
}

func (m *GetTestingDataResponse) Reset()                    { *m = GetTestingDataResponse{} }
func (m *GetTestingDataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTestingDataResponse) ProtoMessage()               {}
func (*GetTestingDataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTestingDataResponse) GetCases() []*GetTestingDataResponse_Case {
	if m != nil {
		return m.Cases
	}
	return nil
}

type GetTestingDataResponse_Case struct {
	OnlyHash bool   `protobuf:"varint,1,opt,name=only_hash,json=onlyHash" json:"only_hash,omitempty"`
	InHash   string `protobuf:"bytes,2,opt,name=in_hash,json=inHash" json:"in_hash,omitempty"`
	In       string `protobuf:"bytes,3,opt,name=in" json:"in,omitempty"`
	OutHash  string `protobuf:"bytes,4,opt,name=out_hash,json=outHash" json:"out_hash,omitempty"`
	Out      string `protobuf:"bytes,5,opt,name=out" json:"out,omitempty"`
}

func (m *GetTestingDataResponse_Case) Reset()                    { *m = GetTestingDataResponse_Case{} }
func (m *GetTestingDataResponse_Case) String() string            { return proto.CompactTextString(m) }
func (*GetTestingDataResponse_Case) ProtoMessage()               {}
func (*GetTestingDataResponse_Case) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *GetTestingDataResponse_Case) GetOnlyHash() bool {
	if m != nil {
		return m.OnlyHash
	}
	return false
}

func (m *GetTestingDataResponse_Case) GetInHash() string {
	if m != nil {
		return m.InHash
	}
	return ""
}

func (m *GetTestingDataResponse_Case) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *GetTestingDataResponse_Case) GetOutHash() string {
	if m != nil {
		return m.OutHash
	}
	return ""
}

func (m *GetTestingDataResponse_Case) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

type StartJudgingRequest struct {
	RunId int64 `protobuf:"varint,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
}

func (m *StartJudgingRequest) Reset()                    { *m = StartJudgingRequest{} }
func (m *StartJudgingRequest) String() string            { return proto.CompactTextString(m) }
func (*StartJudgingRequest) ProtoMessage()               {}
func (*StartJudgingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StartJudgingRequest) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

type StartJudgingResponse struct {
	Received bool `protobuf:"varint,1,opt,name=received" json:"received,omitempty"`
}

func (m *StartJudgingResponse) Reset()                    { *m = StartJudgingResponse{} }
func (m *StartJudgingResponse) String() string            { return proto.CompactTextString(m) }
func (*StartJudgingResponse) ProtoMessage()               {}
func (*StartJudgingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartJudgingResponse) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

type RegisterRequest struct {
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*GetTestingDataRequest)(nil), "rpc.GetTestingDataRequest")
	proto.RegisterType((*GetTestingDataResponse)(nil), "rpc.GetTestingDataResponse")
	proto.RegisterType((*GetTestingDataResponse_Case)(nil), "rpc.GetTestingDataResponse.Case")
	proto.RegisterType((*StartJudgingRequest)(nil), "rpc.StartJudgingRequest")
	proto.RegisterType((*StartJudgingResponse)(nil), "rpc.StartJudgingResponse")
	proto.RegisterType((*RegisterRequest)(nil), "rpc.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "rpc.RegisterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Helper service

type HelperClient interface {
	StartJudging(ctx context.Context, in *StartJudgingRequest, opts ...grpc.CallOption) (*StartJudgingResponse, error)
	GetTestingData(ctx context.Context, in *GetTestingDataRequest, opts ...grpc.CallOption) (*GetTestingDataResponse, error)
	// rpc GetDBInfo() returns (DBInfo) {}
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type helperClient struct {
	cc *grpc.ClientConn
}

func NewHelperClient(cc *grpc.ClientConn) HelperClient {
	return &helperClient{cc}
}

func (c *helperClient) StartJudging(ctx context.Context, in *StartJudgingRequest, opts ...grpc.CallOption) (*StartJudgingResponse, error) {
	out := new(StartJudgingResponse)
	err := grpc.Invoke(ctx, "/rpc.Helper/StartJudging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperClient) GetTestingData(ctx context.Context, in *GetTestingDataRequest, opts ...grpc.CallOption) (*GetTestingDataResponse, error) {
	out := new(GetTestingDataResponse)
	err := grpc.Invoke(ctx, "/rpc.Helper/GetTestingData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helperClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/rpc.Helper/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Helper service

type HelperServer interface {
	StartJudging(context.Context, *StartJudgingRequest) (*StartJudgingResponse, error)
	GetTestingData(context.Context, *GetTestingDataRequest) (*GetTestingDataResponse, error)
	// rpc GetDBInfo() returns (DBInfo) {}
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

func RegisterHelperServer(s *grpc.Server, srv HelperServer) {
	s.RegisterService(&_Helper_serviceDesc, srv)
}

func _Helper_StartJudging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJudgingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServer).StartJudging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Helper/StartJudging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServer).StartJudging(ctx, req.(*StartJudgingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Helper_GetTestingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestingDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServer).GetTestingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Helper/GetTestingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServer).GetTestingData(ctx, req.(*GetTestingDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Helper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Helper/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelperServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Helper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Helper",
	HandlerType: (*HelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJudging",
			Handler:    _Helper_StartJudging_Handler,
		},
		{
			MethodName: "GetTestingData",
			Handler:    _Helper_GetTestingData_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Helper_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/daemon.proto",
}

func init() { proto.RegisterFile("rpc/daemon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0xd1, 0x4e, 0xc2, 0x30,
	0x14, 0x65, 0x0c, 0xc6, 0xb8, 0x1a, 0xc4, 0x0a, 0x3a, 0xc6, 0xcb, 0xd2, 0x27, 0x1e, 0xcc, 0x4c,
	0x30, 0x31, 0xf1, 0x59, 0x8d, 0xa8, 0x2f, 0x3a, 0x7d, 0x27, 0x75, 0x6b, 0x46, 0x93, 0xd9, 0xce,
	0xb6, 0x33, 0xe1, 0x1b, 0xfd, 0x00, 0x7f, 0xc7, 0xac, 0x63, 0x51, 0xc8, 0xc2, 0x5b, 0xef, 0x39,
	0xa7, 0xa7, 0xe7, 0xde, 0x5b, 0x18, 0xca, 0x3c, 0xbe, 0x48, 0x08, 0xfd, 0x10, 0x3c, 0xcc, 0xa5,
	0xd0, 0x02, 0xd9, 0x32, 0x8f, 0xf1, 0x0b, 0x8c, 0xef, 0xa9, 0x7e, 0xa3, 0x4a, 0x33, 0x9e, 0xde,
	0x12, 0x4d, 0x22, 0xfa, 0x59, 0x50, 0xa5, 0xd1, 0x14, 0xfa, 0x82, 0x67, 0xeb, 0xe5, 0x8a, 0xa8,
	0x95, 0x67, 0x05, 0xd6, 0xcc, 0x8d, 0xdc, 0x12, 0x58, 0x10, 0xb5, 0x2a, 0xc9, 0x4c, 0xc4, 0x24,
	0x5b, 0xe6, 0x2c, 0xf1, 0xda, 0x81, 0x35, 0xb3, 0x23, 0xd7, 0x00, 0xcf, 0x2c, 0xc1, 0xdf, 0x16,
	0x9c, 0xee, 0x7a, 0xaa, 0x5c, 0x70, 0x45, 0xd1, 0x15, 0x74, 0x63, 0xa2, 0xa8, 0xf2, 0xac, 0xc0,
	0x9e, 0x1d, 0xcc, 0x83, 0x50, 0xe6, 0x71, 0xd8, 0xac, 0x0d, 0x6f, 0x88, 0xa2, 0x51, 0x25, 0xf7,
	0xd7, 0xd0, 0x29, 0xcb, 0xfd, 0xa1, 0xce, 0xa0, 0xc7, 0x78, 0x45, 0x95, 0x91, 0xfa, 0x91, 0xc3,
	0xb8, 0x21, 0x06, 0xd0, 0x66, 0xdc, 0xb3, 0x0d, 0xd6, 0x66, 0x1c, 0x4d, 0xc0, 0x15, 0x85, 0xae,
	0x94, 0x1d, 0x83, 0xf6, 0x44, 0xa1, 0x8d, 0x74, 0x08, 0xb6, 0x28, 0xb4, 0xd7, 0x35, 0x68, 0x79,
	0xc4, 0xe7, 0x70, 0xf2, 0xaa, 0x89, 0xd4, 0x8f, 0x45, 0x92, 0x32, 0x9e, 0xd6, 0xe3, 0x19, 0x83,
	0x23, 0x0b, 0xbe, 0x64, 0x89, 0x89, 0x61, 0x47, 0x5d, 0x59, 0xf0, 0x87, 0x04, 0xcf, 0x61, 0xb4,
	0xad, 0xde, 0x34, 0xee, 0x83, 0x2b, 0x69, 0x4c, 0xd9, 0x17, 0x4d, 0xea, 0xdc, 0x75, 0x8d, 0x8f,
	0xe1, 0x28, 0xa2, 0x29, 0x53, 0x9a, 0xca, 0x8d, 0x3b, 0x46, 0x30, 0xfc, 0x83, 0x2a, 0x8b, 0xf9,
	0x8f, 0x05, 0xce, 0x82, 0x66, 0x39, 0x95, 0xe8, 0x0e, 0x0e, 0xff, 0xbf, 0x82, 0x3c, 0x33, 0xc7,
	0x86, 0x98, 0xfe, 0xa4, 0x81, 0xa9, 0xfc, 0x70, 0x0b, 0x3d, 0xc1, 0x60, 0x7b, 0xf6, 0xc8, 0x6f,
	0x5c, 0x48, 0x65, 0x35, 0xdd, 0xb3, 0x2c, 0xdc, 0x42, 0xd7, 0xe0, 0xd6, 0x91, 0xd1, 0xc8, 0x48,
	0x77, 0x9a, 0xf2, 0xc7, 0x3b, 0x68, 0x7d, 0xf5, 0xdd, 0x31, 0xff, 0xf1, 0xf2, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x06, 0x3a, 0xf3, 0xb3, 0xa3, 0x02, 0x00, 0x00,
}
