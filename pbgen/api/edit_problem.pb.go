// Code generated by protoc-gen-go.
// source: api/edit_problem.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EditProblemRequest struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *EditProblemRequest) Reset()                    { *m = EditProblemRequest{} }
func (m *EditProblemRequest) String() string            { return proto.CompactTextString(m) }
func (*EditProblemRequest) ProtoMessage()               {}
func (*EditProblemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *EditProblemRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type EditProblemResponse struct {
	Problem *ShowProblemResponse `protobuf:"bytes,1,opt,name=problem" json:"problem,omitempty"`
	Error   *Error               `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *EditProblemResponse) Reset()                    { *m = EditProblemResponse{} }
func (m *EditProblemResponse) String() string            { return proto.CompactTextString(m) }
func (*EditProblemResponse) ProtoMessage()               {}
func (*EditProblemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *EditProblemResponse) GetProblem() *ShowProblemResponse {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *EditProblemResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*EditProblemRequest)(nil), "api.EditProblemRequest")
	proto.RegisterType((*EditProblemResponse)(nil), "api.EditProblemResponse")
}

func init() { proto.RegisterFile("api/edit_problem.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x2c, 0xc8, 0xd4,
	0x4f, 0x4d, 0xc9, 0x2c, 0x89, 0x2f, 0x28, 0xca, 0x4f, 0xca, 0x49, 0xcd, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0x12, 0x00, 0x49, 0x26, 0xe7, 0xe7, 0xe6, 0xe6,
	0xe7, 0x41, 0x84, 0xa5, 0xc0, 0xca, 0x8b, 0x33, 0xf2, 0xcb, 0x51, 0x95, 0x2b, 0xa9, 0x71, 0x09,
	0xb9, 0xa6, 0x64, 0x96, 0x04, 0x40, 0x04, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04,
	0xb8, 0x98, 0x8b, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0xa5, 0x6c,
	0x2e, 0x61, 0x14, 0x75, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x46, 0x5c, 0xec, 0x50, 0xf3,
	0xc0, 0x8a, 0xb9, 0x8d, 0x24, 0xf4, 0x12, 0x0b, 0x32, 0xf5, 0x82, 0x33, 0xf2, 0xcb, 0xd1, 0x94,
	0x06, 0xc1, 0x14, 0x0a, 0x29, 0x70, 0xb1, 0xa6, 0x16, 0x15, 0xe5, 0x17, 0x49, 0x30, 0x81, 0x75,
	0x70, 0x81, 0x75, 0xb8, 0x82, 0x44, 0x82, 0x20, 0x12, 0x49, 0x6c, 0x60, 0xb7, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x52, 0x49, 0x5d, 0xef, 0xe4, 0x00, 0x00, 0x00,
}
