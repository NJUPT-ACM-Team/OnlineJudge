// Code generated by protoc-gen-go.
// source: api/list_submissions.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListSubmissionsRequest struct {
	PerPage           int32                          `protobuf:"varint,1,opt,name=per_page,json=perPage" json:"per_page,omitempty"`
	CurrentPage       int32                          `protobuf:"varint,2,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	Filter            *ListSubmissionsRequest_Filter `protobuf:"bytes,3,opt,name=filter" json:"filter,omitempty"`
	NeedLanguagesList bool                           `protobuf:"varint,4,opt,name=need_languages_list,json=needLanguagesList" json:"need_languages_list,omitempty"`
	NeedOjsList       bool                           `protobuf:"varint,5,opt,name=need_ojs_list,json=needOjsList" json:"need_ojs_list,omitempty"`
}

func (m *ListSubmissionsRequest) Reset()                    { *m = ListSubmissionsRequest{} }
func (m *ListSubmissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSubmissionsRequest) ProtoMessage()               {}
func (*ListSubmissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ListSubmissionsRequest) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *ListSubmissionsRequest) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *ListSubmissionsRequest) GetFilter() *ListSubmissionsRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListSubmissionsRequest) GetNeedLanguagesList() bool {
	if m != nil {
		return m.NeedLanguagesList
	}
	return false
}

func (m *ListSubmissionsRequest) GetNeedOjsList() bool {
	if m != nil {
		return m.NeedOjsList
	}
	return false
}

type ListSubmissionsRequest_Filter struct {
	Username   string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Oj         string `protobuf:"bytes,2,opt,name=oj" json:"oj,omitempty"`
	Pid        string `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Result     string `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	LanguageId int64  `protobuf:"varint,5,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
}

func (m *ListSubmissionsRequest_Filter) Reset()         { *m = ListSubmissionsRequest_Filter{} }
func (m *ListSubmissionsRequest_Filter) String() string { return proto.CompactTextString(m) }
func (*ListSubmissionsRequest_Filter) ProtoMessage()    {}
func (*ListSubmissionsRequest_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

func (m *ListSubmissionsRequest_Filter) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListSubmissionsRequest_Filter) GetOj() string {
	if m != nil {
		return m.Oj
	}
	return ""
}

func (m *ListSubmissionsRequest_Filter) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *ListSubmissionsRequest_Filter) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *ListSubmissionsRequest_Filter) GetLanguageId() int64 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

type ListSubmissionResponse struct {
	Lines         []*ListSubmissionResponse_PerLine `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
	TotalLines    int32                             `protobuf:"varint,2,opt,name=total_lines,json=totalLines" json:"total_lines,omitempty"`
	TotalPages    int32                             `protobuf:"varint,3,opt,name=total_pages,json=totalPages" json:"total_pages,omitempty"`
	CurrentPage   int32                             `protobuf:"varint,4,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	LanguagesList []*Language                       `protobuf:"bytes,5,rep,name=languages_list,json=languagesList" json:"languages_list,omitempty"`
	OjsList       []string                          `protobuf:"bytes,6,rep,name=ojs_list,json=ojsList" json:"ojs_list,omitempty"`
	Error         *Error                            `protobuf:"bytes,7,opt,name=error" json:"error,omitempty"`
}

func (m *ListSubmissionResponse) Reset()                    { *m = ListSubmissionResponse{} }
func (m *ListSubmissionResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSubmissionResponse) ProtoMessage()               {}
func (*ListSubmissionResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ListSubmissionResponse) GetLines() []*ListSubmissionResponse_PerLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *ListSubmissionResponse) GetTotalLines() int32 {
	if m != nil {
		return m.TotalLines
	}
	return 0
}

func (m *ListSubmissionResponse) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *ListSubmissionResponse) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *ListSubmissionResponse) GetLanguagesList() []*Language {
	if m != nil {
		return m.LanguagesList
	}
	return nil
}

func (m *ListSubmissionResponse) GetOjsList() []string {
	if m != nil {
		return m.OjsList
	}
	return nil
}

func (m *ListSubmissionResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ListSubmissionResponse_PerLine struct {
	Sid             string    `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	RunId           string    `protobuf:"bytes,2,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	Username        string    `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Status          string    `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	StatusCode      string    `protobuf:"bytes,5,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Language        *Language `protobuf:"bytes,6,opt,name=language" json:"language,omitempty"`
	TimeUsed        int32     `protobuf:"varint,7,opt,name=time_used,json=timeUsed" json:"time_used,omitempty"`
	MemoryUsed      int32     `protobuf:"varint,8,opt,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
	Testcases       int32     `protobuf:"varint,9,opt,name=testcases" json:"testcases,omitempty"`
	TestcasesPassed int32     `protobuf:"varint,10,opt,name=testcases_passed,json=testcasesPassed" json:"testcases_passed,omitempty"`
	CodeLength      int32     `protobuf:"varint,11,opt,name=code_length,json=codeLength" json:"code_length,omitempty"`
	SubmitTime      string    `protobuf:"bytes,12,opt,name=submit_time,json=submitTime" json:"submit_time,omitempty"`
	Code            string    `protobuf:"bytes,13,opt,name=code" json:"code,omitempty"`
}

func (m *ListSubmissionResponse_PerLine) Reset()         { *m = ListSubmissionResponse_PerLine{} }
func (m *ListSubmissionResponse_PerLine) String() string { return proto.CompactTextString(m) }
func (*ListSubmissionResponse_PerLine) ProtoMessage()    {}
func (*ListSubmissionResponse_PerLine) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{1, 0}
}

func (m *ListSubmissionResponse_PerLine) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *ListSubmissionResponse_PerLine) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ListSubmissionResponse_PerLine) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListSubmissionResponse_PerLine) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ListSubmissionResponse_PerLine) GetStatusCode() string {
	if m != nil {
		return m.StatusCode
	}
	return ""
}

func (m *ListSubmissionResponse_PerLine) GetLanguage() *Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func (m *ListSubmissionResponse_PerLine) GetTimeUsed() int32 {
	if m != nil {
		return m.TimeUsed
	}
	return 0
}

func (m *ListSubmissionResponse_PerLine) GetMemoryUsed() int32 {
	if m != nil {
		return m.MemoryUsed
	}
	return 0
}

func (m *ListSubmissionResponse_PerLine) GetTestcases() int32 {
	if m != nil {
		return m.Testcases
	}
	return 0
}

func (m *ListSubmissionResponse_PerLine) GetTestcasesPassed() int32 {
	if m != nil {
		return m.TestcasesPassed
	}
	return 0
}

func (m *ListSubmissionResponse_PerLine) GetCodeLength() int32 {
	if m != nil {
		return m.CodeLength
	}
	return 0
}

func (m *ListSubmissionResponse_PerLine) GetSubmitTime() string {
	if m != nil {
		return m.SubmitTime
	}
	return ""
}

func (m *ListSubmissionResponse_PerLine) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func init() {
	proto.RegisterType((*ListSubmissionsRequest)(nil), "api.ListSubmissionsRequest")
	proto.RegisterType((*ListSubmissionsRequest_Filter)(nil), "api.ListSubmissionsRequest.Filter")
	proto.RegisterType((*ListSubmissionResponse)(nil), "api.ListSubmissionResponse")
	proto.RegisterType((*ListSubmissionResponse_PerLine)(nil), "api.ListSubmissionResponse.PerLine")
}

func init() { proto.RegisterFile("api/list_submissions.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x55, 0xe2, 0xda, 0xb1, 0x27, 0x4d, 0x29, 0x8b, 0xa8, 0xdc, 0x80, 0x44, 0x08, 0x97, 0xf4,
	0x62, 0xa4, 0xc2, 0x05, 0xae, 0x08, 0xa4, 0x4a, 0x91, 0xa8, 0x16, 0x38, 0x5b, 0x6e, 0x3c, 0x84,
	0x8d, 0x6c, 0xaf, 0xd9, 0x59, 0x1f, 0x38, 0xf1, 0x09, 0x7c, 0x11, 0xdf, 0xc3, 0x6f, 0xa0, 0x9d,
	0xb5, 0x53, 0x35, 0xed, 0x6d, 0xf7, 0xbd, 0xb7, 0x33, 0xf3, 0xe6, 0x59, 0x86, 0x79, 0xd1, 0xaa,
	0xd7, 0x95, 0x22, 0x9b, 0x53, 0x77, 0x53, 0x2b, 0x22, 0xa5, 0x1b, 0xca, 0x5a, 0xa3, 0xad, 0x16,
	0x41, 0xd1, 0xaa, 0xf9, 0xa9, 0x13, 0x6c, 0x74, 0x5d, 0xeb, 0xc6, 0xc3, 0x73, 0xc1, 0x4f, 0x8a,
	0x66, 0xdb, 0x15, 0x5b, 0xf4, 0xd8, 0xf2, 0xdf, 0x18, 0xce, 0xd6, 0x8a, 0xec, 0x97, 0xdb, 0x22,
	0x12, 0x7f, 0x76, 0x48, 0x56, 0x9c, 0x43, 0xdc, 0xa2, 0xc9, 0xdb, 0x62, 0x8b, 0xe9, 0x68, 0x31,
	0x5a, 0x85, 0x72, 0xd2, 0xa2, 0xb9, 0x2e, 0xb6, 0x28, 0x5e, 0xc2, 0xf1, 0xa6, 0x33, 0x06, 0x1b,
	0xeb, 0xe9, 0x31, 0xd3, 0xd3, 0x1e, 0x63, 0xc9, 0x7b, 0x88, 0xbe, 0xab, 0xca, 0xa2, 0x49, 0x83,
	0xc5, 0x68, 0x35, 0xbd, 0x5c, 0x66, 0x45, 0xab, 0xb2, 0x87, 0x5b, 0x65, 0x9f, 0x58, 0x29, 0xfb,
	0x17, 0x22, 0x83, 0x27, 0x0d, 0x62, 0x99, 0x0f, 0xb3, 0x52, 0xee, 0x8c, 0xa6, 0x47, 0x8b, 0xd1,
	0x2a, 0x96, 0x8f, 0x1d, 0xb5, 0x1e, 0x18, 0x57, 0x50, 0x2c, 0x61, 0xc6, 0x7a, 0xbd, 0xeb, 0x95,
	0x21, 0x2b, 0xa7, 0x0e, 0xfc, 0xbc, 0x63, 0xcd, 0xfc, 0x37, 0x44, 0xbe, 0x8b, 0x98, 0x43, 0xdc,
	0x11, 0x9a, 0xa6, 0xa8, 0xbd, 0xaf, 0x44, 0xee, 0xef, 0xe2, 0x04, 0xc6, 0x7a, 0xc7, 0x76, 0x12,
	0x39, 0xd6, 0x3b, 0x71, 0x0a, 0x41, 0xab, 0x4a, 0xb6, 0x90, 0x48, 0x77, 0x14, 0x67, 0x10, 0x19,
	0xa4, 0xae, 0xf2, 0xe3, 0x24, 0xb2, 0xbf, 0x89, 0x17, 0x30, 0x1d, 0xc6, 0xcd, 0x55, 0xc9, 0x13,
	0x04, 0x12, 0x06, 0xe8, 0xaa, 0x5c, 0xfe, 0x0d, 0x0f, 0x37, 0x2d, 0x91, 0x5a, 0xdd, 0x10, 0x8a,
	0x77, 0x10, 0x56, 0xaa, 0x41, 0x4a, 0x47, 0x8b, 0x60, 0x35, 0xbd, 0x7c, 0xf5, 0xc0, 0xaa, 0x06,
	0x6d, 0x76, 0x8d, 0x66, 0xad, 0x1a, 0x94, 0xfe, 0x85, 0x6b, 0x6b, 0xb5, 0x2d, 0xaa, 0xdc, 0x17,
	0xf0, 0x41, 0x00, 0x43, 0xeb, 0xbb, 0x02, 0x17, 0x14, 0xb1, 0x93, 0x41, 0xe0, 0x72, 0xa2, 0x7b,
	0x59, 0x1e, 0xdd, 0xcf, 0xf2, 0x2d, 0x9c, 0x1c, 0x44, 0x11, 0xf2, 0xa0, 0x33, 0x3f, 0x68, 0x4f,
	0xc9, 0x59, 0x75, 0x27, 0x95, 0x73, 0x88, 0xf7, 0x81, 0x44, 0x8b, 0x60, 0x95, 0xc8, 0x89, 0xf6,
	0x61, 0x88, 0x05, 0x84, 0x68, 0x8c, 0x36, 0xe9, 0x84, 0xbf, 0x0d, 0xe0, 0x3a, 0x1f, 0x1d, 0x22,
	0x3d, 0x31, 0xff, 0x13, 0xc0, 0xa4, 0xb7, 0xea, 0x42, 0x20, 0x55, 0xf6, 0x59, 0xb9, 0xa3, 0x78,
	0x0a, 0x91, 0xe9, 0x1a, 0xb7, 0x67, 0x1f, 0x55, 0x68, 0xba, 0xe6, 0xaa, 0xbc, 0x93, 0x6c, 0x70,
	0x90, 0xec, 0x19, 0x44, 0x64, 0x0b, 0xdb, 0xd1, 0x90, 0x9b, 0xbf, 0xb9, 0xfd, 0xf8, 0x53, 0xbe,
	0xd1, 0x25, 0x72, 0x6e, 0x89, 0x04, 0x0f, 0x7d, 0xd0, 0x25, 0x8a, 0x0b, 0x88, 0x07, 0x5f, 0x69,
	0xc4, 0xe3, 0x1e, 0xd8, 0xde, 0xd3, 0xe2, 0x19, 0x24, 0x56, 0xd5, 0x98, 0x77, 0x84, 0x25, 0x5b,
	0x0b, 0x65, 0xec, 0x80, 0x6f, 0x84, 0xa5, 0x6b, 0x54, 0x63, 0xad, 0xcd, 0x2f, 0x4f, 0xc7, 0x3e,
	0x08, 0x0f, 0xb1, 0xe0, 0x39, 0x24, 0x16, 0xc9, 0x6e, 0x0a, 0x42, 0x4a, 0x13, 0xa6, 0x6f, 0x01,
	0x71, 0x01, 0xa7, 0xfb, 0x4b, 0xde, 0x16, 0xe4, 0x6a, 0x00, 0x8b, 0x1e, 0xed, 0xf1, 0x6b, 0x86,
	0x5d, 0x27, 0xe7, 0x25, 0xaf, 0xb0, 0xd9, 0xda, 0x1f, 0xe9, 0xd4, 0x77, 0x72, 0xd0, 0x9a, 0x11,
	0xf6, 0xec, 0xbe, 0x2c, 0x9b, 0xbb, 0xe9, 0xd2, 0xe3, 0xde, 0x33, 0x43, 0x5f, 0x55, 0x8d, 0x42,
	0xc0, 0x11, 0x6f, 0x63, 0xc6, 0x0c, 0x9f, 0x6f, 0x22, 0xfe, 0x61, 0xbc, 0xf9, 0x1f, 0x00, 0x00,
	0xff, 0xff, 0x47, 0x74, 0xc7, 0xde, 0x79, 0x04, 0x00, 0x00,
}
