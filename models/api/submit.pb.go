// Code generated by protoc-gen-go.
// source: api/submit.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubmitResponse_Result int32

const (
	SubmitResponse_SUCCESS SubmitResponse_Result = 0
	SubmitResponse_FAILURE SubmitResponse_Result = 1
)

var SubmitResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}
var SubmitResponse_Result_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x SubmitResponse_Result) String() string {
	return proto.EnumName(SubmitResponse_Result_name, int32(x))
}
func (SubmitResponse_Result) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type SubmitRequest struct {
	Oj           string `protobuf:"bytes,1,opt,name=oj" json:"oj,omitempty"`
	ProblemId    int32  `protobuf:"varint,2,opt,name=problem_id,json=problemId" json:"problem_id,omitempty"`
	Code         string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	LanguageCode int32  `protobuf:"varint,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	IsShared     bool   `protobuf:"varint,5,opt,name=is_shared,json=isShared" json:"is_shared,omitempty"`
}

func (m *SubmitRequest) Reset()                    { *m = SubmitRequest{} }
func (m *SubmitRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitRequest) ProtoMessage()               {}
func (*SubmitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SubmitRequest) GetOj() string {
	if m != nil {
		return m.Oj
	}
	return ""
}

func (m *SubmitRequest) GetProblemId() int32 {
	if m != nil {
		return m.ProblemId
	}
	return 0
}

func (m *SubmitRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SubmitRequest) GetLanguageCode() int32 {
	if m != nil {
		return m.LanguageCode
	}
	return 0
}

func (m *SubmitRequest) GetIsShared() bool {
	if m != nil {
		return m.IsShared
	}
	return false
}

type SubmitResponse struct {
	Result       SubmitResponse_Result `protobuf:"varint,1,opt,name=result,enum=api.SubmitResponse_Result" json:"result,omitempty"`
	Hint         string                `protobuf:"bytes,2,opt,name=hint" json:"hint,omitempty"`
	SubmissionId int64                 `protobuf:"varint,3,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
}

func (m *SubmitResponse) Reset()                    { *m = SubmitResponse{} }
func (m *SubmitResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitResponse) ProtoMessage()               {}
func (*SubmitResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SubmitResponse) GetResult() SubmitResponse_Result {
	if m != nil {
		return m.Result
	}
	return SubmitResponse_SUCCESS
}

func (m *SubmitResponse) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *SubmitResponse) GetSubmissionId() int64 {
	if m != nil {
		return m.SubmissionId
	}
	return 0
}

func init() {
	proto.RegisterType((*SubmitRequest)(nil), "api.SubmitRequest")
	proto.RegisterType((*SubmitResponse)(nil), "api.SubmitResponse")
	proto.RegisterEnum("api.SubmitResponse_Result", SubmitResponse_Result_name, SubmitResponse_Result_value)
}

func init() { proto.RegisterFile("api/submit.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x6a, 0x83, 0x40,
	0x10, 0x86, 0xbb, 0x9a, 0xd8, 0x38, 0x4d, 0x44, 0xf6, 0x24, 0x2d, 0x05, 0xb1, 0x17, 0x4f, 0x16,
	0xd2, 0x27, 0x28, 0x92, 0x82, 0xd0, 0xd3, 0x4a, 0xce, 0xb2, 0xd6, 0x25, 0xd9, 0x60, 0xdc, 0xad,
	0xa3, 0x6f, 0xd2, 0x17, 0xe8, 0x9b, 0x96, 0x9d, 0x26, 0x94, 0xde, 0x66, 0xfe, 0xfd, 0x66, 0xf9,
	0x66, 0x20, 0x96, 0x56, 0x3f, 0xe3, 0xdc, 0x9e, 0xf5, 0x54, 0xd8, 0xd1, 0x4c, 0x86, 0xfb, 0xd2,
	0xea, 0xec, 0x8b, 0xc1, 0xa6, 0xa6, 0x54, 0xa8, 0xcf, 0x59, 0xe1, 0xc4, 0x23, 0xf0, 0xcc, 0x29,
	0x61, 0x29, 0xcb, 0x43, 0xe1, 0x99, 0x13, 0x7f, 0x04, 0xb0, 0xa3, 0x69, 0x7b, 0x75, 0x6e, 0x74,
	0x97, 0x78, 0x29, 0xcb, 0x97, 0x22, 0xbc, 0x24, 0x55, 0xc7, 0x39, 0x2c, 0x3e, 0x4c, 0xa7, 0x12,
	0x9f, 0x06, 0xa8, 0xe6, 0x4f, 0xb0, 0xe9, 0xe5, 0x70, 0x98, 0xe5, 0x41, 0x35, 0xf4, 0xb8, 0xa0,
	0xa9, 0xf5, 0x35, 0x2c, 0x1d, 0xf4, 0x00, 0xa1, 0xc6, 0x06, 0x8f, 0x72, 0x54, 0x5d, 0xb2, 0x4c,
	0x59, 0xbe, 0x12, 0x2b, 0x8d, 0x35, 0xf5, 0xd9, 0x37, 0x83, 0xe8, 0xaa, 0x85, 0xd6, 0x0c, 0xa8,
	0xf8, 0x16, 0x82, 0x51, 0xe1, 0xdc, 0x4f, 0xe4, 0x16, 0x6d, 0xef, 0x0b, 0x69, 0x75, 0xf1, 0x1f,
	0x2a, 0x04, 0x11, 0xe2, 0x42, 0x3a, 0xb9, 0xa3, 0x1e, 0x26, 0xb2, 0x0e, 0x05, 0xd5, 0x4e, 0x8e,
	0xce, 0x80, 0xa8, 0xcd, 0xe0, 0x56, 0x72, 0xe6, 0xbe, 0x58, 0xff, 0x85, 0x55, 0x97, 0x65, 0x10,
	0xfc, 0x7e, 0xc5, 0xef, 0xe0, 0xb6, 0xde, 0x97, 0xe5, 0xae, 0xae, 0xe3, 0x1b, 0xd7, 0xbc, 0xbd,
	0x56, 0xef, 0x7b, 0xb1, 0x8b, 0x59, 0x1b, 0xd0, 0x19, 0x5f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0xfa, 0x51, 0x50, 0x5a, 0x01, 0x00, 0x00,
}
