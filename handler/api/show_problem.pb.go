// Code generated by protoc-gen-go.
// source: api/show_problem.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ShowProblemRequest struct {
	ContestId  uint64 `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	ProblemSid string `protobuf:"bytes,2,opt,name=problem_sid,json=problemSid" json:"problem_sid,omitempty"`
}

func (m *ShowProblemRequest) Reset()                    { *m = ShowProblemRequest{} }
func (m *ShowProblemRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowProblemRequest) ProtoMessage()               {}
func (*ShowProblemRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *ShowProblemRequest) GetContestId() uint64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *ShowProblemRequest) GetProblemSid() string {
	if m != nil {
		return m.ProblemSid
	}
	return ""
}

// response
type ShowProblemResponse struct {
	ContestId    uint64      `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	ProblemSid   uint64      `protobuf:"varint,2,opt,name=problem_sid,json=problemSid" json:"problem_sid,omitempty"`
	Title        string      `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	TimeLimit    int32       `protobuf:"varint,4,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
	MemoryLimit  int32       `protobuf:"varint,5,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	Input        string      `protobuf:"bytes,6,opt,name=input" json:"input,omitempty"`
	Output       string      `protobuf:"bytes,7,opt,name=output" json:"output,omitempty"`
	SampleInput  string      `protobuf:"bytes,8,opt,name=sample_input,json=sampleInput" json:"sample_input,omitempty"`
	SampleOutput string      `protobuf:"bytes,9,opt,name=sample_output,json=sampleOutput" json:"sample_output,omitempty"`
	Source       string      `protobuf:"bytes,19,opt,name=source" json:"source,omitempty"`
	Hint         string      `protobuf:"bytes,11,opt,name=hint" json:"hint,omitempty"`
	Languages    []*Language `protobuf:"bytes,12,rep,name=languages" json:"languages,omitempty"`
	Error        *Error      `protobuf:"bytes,13,opt,name=error" json:"error,omitempty"`
}

func (m *ShowProblemResponse) Reset()                    { *m = ShowProblemResponse{} }
func (m *ShowProblemResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowProblemResponse) ProtoMessage()               {}
func (*ShowProblemResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ShowProblemResponse) GetContestId() uint64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *ShowProblemResponse) GetProblemSid() uint64 {
	if m != nil {
		return m.ProblemSid
	}
	return 0
}

func (m *ShowProblemResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ShowProblemResponse) GetTimeLimit() int32 {
	if m != nil {
		return m.TimeLimit
	}
	return 0
}

func (m *ShowProblemResponse) GetMemoryLimit() int32 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *ShowProblemResponse) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ShowProblemResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ShowProblemResponse) GetSampleInput() string {
	if m != nil {
		return m.SampleInput
	}
	return ""
}

func (m *ShowProblemResponse) GetSampleOutput() string {
	if m != nil {
		return m.SampleOutput
	}
	return ""
}

func (m *ShowProblemResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ShowProblemResponse) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *ShowProblemResponse) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *ShowProblemResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*ShowProblemRequest)(nil), "api.ShowProblemRequest")
	proto.RegisterType((*ShowProblemResponse)(nil), "api.ShowProblemResponse")
}

func init() { proto.RegisterFile("api/show_problem.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x6a, 0xeb, 0x30,
	0x10, 0x85, 0xf1, 0xf5, 0xcf, 0xbd, 0x1e, 0x27, 0x70, 0x51, 0x42, 0x10, 0x81, 0x52, 0x37, 0xdd,
	0x18, 0x0a, 0x29, 0xa4, 0xcf, 0xd0, 0x45, 0x20, 0xd0, 0xe2, 0x74, 0x6f, 0x9c, 0x58, 0x24, 0x02,
	0xcb, 0x52, 0x25, 0x99, 0xd0, 0x97, 0xe9, 0xb3, 0x16, 0x69, 0x54, 0xda, 0x6e, 0xbb, 0xd3, 0x7c,
	0x73, 0xce, 0xa7, 0xc5, 0xc0, 0xa2, 0x55, 0xfc, 0xde, 0x9c, 0xe5, 0xa5, 0x51, 0x5a, 0x1e, 0x7a,
	0x26, 0xd6, 0x4a, 0x4b, 0x2b, 0x49, 0xdc, 0x2a, 0xbe, 0xfc, 0xef, 0x96, 0x47, 0x29, 0x84, 0x1c,
	0x10, 0x2f, 0x89, 0x23, 0x7d, 0x3b, 0x9c, 0xc6, 0xf6, 0xc4, 0x90, 0xad, 0x5e, 0x80, 0xec, 0xcf,
	0xf2, 0xf2, 0x8c, 0xfd, 0x9a, 0xbd, 0x8e, 0xcc, 0x58, 0x72, 0x05, 0x70, 0x94, 0x83, 0x65, 0xc6,
	0x36, 0xbc, 0xa3, 0x51, 0x19, 0x55, 0x49, 0x9d, 0x07, 0xb2, 0xed, 0xc8, 0x35, 0x14, 0xe1, 0xc3,
	0xc6, 0xf0, 0x8e, 0xfe, 0x29, 0xa3, 0x2a, 0xaf, 0x21, 0xa0, 0x3d, 0xef, 0x56, 0xef, 0x31, 0xcc,
	0x7e, 0x68, 0x8d, 0x92, 0x83, 0x61, 0xbf, 0xf0, 0x26, 0xdf, 0xbd, 0x64, 0x0e, 0xa9, 0xe5, 0xb6,
	0x67, 0x34, 0xf6, 0x5f, 0xe2, 0xe0, 0xac, 0x96, 0x0b, 0xd6, 0xf4, 0x5c, 0x70, 0x4b, 0x93, 0x32,
	0xaa, 0xd2, 0x3a, 0x77, 0x64, 0xe7, 0x00, 0xb9, 0x81, 0x89, 0x60, 0x42, 0xea, 0xb7, 0x10, 0x48,
	0x7d, 0xa0, 0x40, 0x86, 0x91, 0x39, 0xa4, 0x7c, 0x50, 0xa3, 0xa5, 0x19, 0x7a, 0xfd, 0x40, 0x16,
	0x90, 0xc9, 0xd1, 0x3a, 0xfc, 0xd7, 0xe3, 0x30, 0x39, 0xa1, 0x69, 0x85, 0xea, 0x59, 0x83, 0xa5,
	0x7f, 0x7e, 0x5b, 0x20, 0xdb, 0xfa, 0xea, 0x2d, 0x4c, 0x43, 0x24, 0x18, 0x72, 0x9f, 0x09, 0xbd,
	0x27, 0xf4, 0x2c, 0x20, 0x33, 0x72, 0xd4, 0x47, 0x46, 0x67, 0xe8, 0xc7, 0x89, 0x10, 0x48, 0xce,
	0x7c, 0xb0, 0xb4, 0xf0, 0xd4, 0xbf, 0xc9, 0x1d, 0xe4, 0x9f, 0x97, 0x33, 0x74, 0x52, 0xc6, 0x55,
	0xb1, 0x99, 0xae, 0x5b, 0xc5, 0xd7, 0xbb, 0x40, 0xeb, 0xaf, 0x3d, 0x29, 0x21, 0x65, 0x5a, 0x4b,
	0x4d, 0xa7, 0x65, 0x54, 0x15, 0x1b, 0xf0, 0xc1, 0x47, 0x47, 0x6a, 0x5c, 0x1c, 0x32, 0x7f, 0xfd,
	0x87, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0x16, 0xcb, 0x5f, 0x42, 0x02, 0x00, 0x00,
}
