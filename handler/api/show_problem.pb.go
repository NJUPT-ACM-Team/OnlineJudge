// Code generated by protoc-gen-go.
// source: api/show_problem.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ShowProblemRequest_Element int32

const (
	ShowProblemRequest_TITLE         ShowProblemRequest_Element = 0
	ShowProblemRequest_TIME_LIMIT    ShowProblemRequest_Element = 1
	ShowProblemRequest_MEMORY_LIMIT  ShowProblemRequest_Element = 2
	ShowProblemRequest_DESCRIPTION   ShowProblemRequest_Element = 3
	ShowProblemRequest_INPUT         ShowProblemRequest_Element = 4
	ShowProblemRequest_OUTPUT        ShowProblemRequest_Element = 5
	ShowProblemRequest_SAMPLE_INPUT  ShowProblemRequest_Element = 6
	ShowProblemRequest_SAMPLE_OUTPUT ShowProblemRequest_Element = 7
	ShowProblemRequest_SOURCE        ShowProblemRequest_Element = 8
	ShowProblemRequest_HINT          ShowProblemRequest_Element = 9
)

var ShowProblemRequest_Element_name = map[int32]string{
	0: "TITLE",
	1: "TIME_LIMIT",
	2: "MEMORY_LIMIT",
	3: "DESCRIPTION",
	4: "INPUT",
	5: "OUTPUT",
	6: "SAMPLE_INPUT",
	7: "SAMPLE_OUTPUT",
	8: "SOURCE",
	9: "HINT",
}
var ShowProblemRequest_Element_value = map[string]int32{
	"TITLE":         0,
	"TIME_LIMIT":    1,
	"MEMORY_LIMIT":  2,
	"DESCRIPTION":   3,
	"INPUT":         4,
	"OUTPUT":        5,
	"SAMPLE_INPUT":  6,
	"SAMPLE_OUTPUT": 7,
	"SOURCE":        8,
	"HINT":          9,
}

func (x ShowProblemRequest_Element) String() string {
	return proto.EnumName(ShowProblemRequest_Element_name, int32(x))
}
func (ShowProblemRequest_Element) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0}
}

type ShowProblemRequest struct {
	ContestId         uint64                       `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	ProblemSid        string                       `protobuf:"bytes,2,opt,name=problem_sid,json=problemSid" json:"problem_sid,omitempty"`
	IfNeedAllElements bool                         `protobuf:"varint,3,opt,name=if_need_all_elements,json=ifNeedAllElements" json:"if_need_all_elements,omitempty"`
	ElementsNeeded    []ShowProblemRequest_Element `protobuf:"varint,4,rep,packed,name=elements_needed,json=elementsNeeded,enum=api.ShowProblemRequest_Element" json:"elements_needed,omitempty"`
}

func (m *ShowProblemRequest) Reset()                    { *m = ShowProblemRequest{} }
func (m *ShowProblemRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowProblemRequest) ProtoMessage()               {}
func (*ShowProblemRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ShowProblemRequest) GetContestId() uint64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *ShowProblemRequest) GetProblemSid() string {
	if m != nil {
		return m.ProblemSid
	}
	return ""
}

func (m *ShowProblemRequest) GetIfNeedAllElements() bool {
	if m != nil {
		return m.IfNeedAllElements
	}
	return false
}

func (m *ShowProblemRequest) GetElementsNeeded() []ShowProblemRequest_Element {
	if m != nil {
		return m.ElementsNeeded
	}
	return nil
}

// response
type ShowProblemResponse struct {
	ContestId    uint64                          `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	ProblemSid   uint64                          `protobuf:"varint,2,opt,name=problem_sid,json=problemSid" json:"problem_sid,omitempty"`
	Title        string                          `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	TimeLimit    int32                           `protobuf:"varint,4,opt,name=time_limit,json=timeLimit" json:"time_limit,omitempty"`
	MemoryLimit  int32                           `protobuf:"varint,5,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	Input        string                          `protobuf:"bytes,6,opt,name=input" json:"input,omitempty"`
	Output       string                          `protobuf:"bytes,7,opt,name=output" json:"output,omitempty"`
	SampleInput  string                          `protobuf:"bytes,8,opt,name=sample_input,json=sampleInput" json:"sample_input,omitempty"`
	SampleOutput string                          `protobuf:"bytes,9,opt,name=sample_output,json=sampleOutput" json:"sample_output,omitempty"`
	Source       string                          `protobuf:"bytes,19,opt,name=source" json:"source,omitempty"`
	Hint         string                          `protobuf:"bytes,11,opt,name=hint" json:"hint,omitempty"`
	Languages    []*ShowProblemResponse_Language `protobuf:"bytes,12,rep,name=languages" json:"languages,omitempty"`
	Error        string                          `protobuf:"bytes,13,opt,name=error" json:"error,omitempty"`
}

func (m *ShowProblemResponse) Reset()                    { *m = ShowProblemResponse{} }
func (m *ShowProblemResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowProblemResponse) ProtoMessage()               {}
func (*ShowProblemResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ShowProblemResponse) GetContestId() uint64 {
	if m != nil {
		return m.ContestId
	}
	return 0
}

func (m *ShowProblemResponse) GetProblemSid() uint64 {
	if m != nil {
		return m.ProblemSid
	}
	return 0
}

func (m *ShowProblemResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ShowProblemResponse) GetTimeLimit() int32 {
	if m != nil {
		return m.TimeLimit
	}
	return 0
}

func (m *ShowProblemResponse) GetMemoryLimit() int32 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *ShowProblemResponse) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *ShowProblemResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ShowProblemResponse) GetSampleInput() string {
	if m != nil {
		return m.SampleInput
	}
	return ""
}

func (m *ShowProblemResponse) GetSampleOutput() string {
	if m != nil {
		return m.SampleOutput
	}
	return ""
}

func (m *ShowProblemResponse) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ShowProblemResponse) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

func (m *ShowProblemResponse) GetLanguages() []*ShowProblemResponse_Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *ShowProblemResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ShowProblemResponse_Language struct {
	Language string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Code     int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *ShowProblemResponse_Language) Reset()                    { *m = ShowProblemResponse_Language{} }
func (m *ShowProblemResponse_Language) String() string            { return proto.CompactTextString(m) }
func (*ShowProblemResponse_Language) ProtoMessage()               {}
func (*ShowProblemResponse_Language) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *ShowProblemResponse_Language) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ShowProblemResponse_Language) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*ShowProblemRequest)(nil), "api.ShowProblemRequest")
	proto.RegisterType((*ShowProblemResponse)(nil), "api.ShowProblemResponse")
	proto.RegisterType((*ShowProblemResponse_Language)(nil), "api.ShowProblemResponse.Language")
	proto.RegisterEnum("api.ShowProblemRequest_Element", ShowProblemRequest_Element_name, ShowProblemRequest_Element_value)
}

func init() { proto.RegisterFile("api/show_problem.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcb, 0x6a, 0xdb, 0x4e,
	0x14, 0xc6, 0xff, 0x8a, 0x2e, 0x96, 0x8e, 0x6c, 0x47, 0x99, 0x18, 0x23, 0x02, 0x7f, 0xa2, 0xb8,
	0x1b, 0xad, 0x1c, 0x48, 0x77, 0xdd, 0x94, 0x90, 0x0a, 0x22, 0xf0, 0x8d, 0xb1, 0xbc, 0xe8, 0x4a,
	0x28, 0xd6, 0x24, 0x1e, 0x90, 0x34, 0xaa, 0x34, 0x26, 0xf4, 0x51, 0xfa, 0x7a, 0xdd, 0xf6, 0x25,
	0xca, 0x5c, 0xdc, 0x12, 0xb2, 0xeb, 0x6e, 0xce, 0x77, 0xbe, 0xdf, 0xc7, 0x9c, 0x33, 0x12, 0x4c,
	0x8b, 0x96, 0xde, 0xf6, 0x07, 0xf6, 0x9a, 0xb7, 0x1d, 0x7b, 0xaa, 0x48, 0x3d, 0x6f, 0x3b, 0xc6,
	0x19, 0x32, 0x8b, 0x96, 0xce, 0x7e, 0x9d, 0x01, 0xda, 0x1e, 0xd8, 0xeb, 0x46, 0xb5, 0x30, 0xf9,
	0x76, 0x24, 0x3d, 0x47, 0xff, 0x03, 0xec, 0x59, 0xc3, 0x49, 0xcf, 0x73, 0x5a, 0x86, 0x46, 0x64,
	0xc4, 0x16, 0xf6, 0xb4, 0x92, 0x96, 0xe8, 0x1a, 0x7c, 0x9d, 0x95, 0xf7, 0xb4, 0x0c, 0xcf, 0x22,
	0x23, 0xf6, 0x30, 0x68, 0x69, 0x4b, 0x4b, 0x74, 0x0b, 0x13, 0xfa, 0x9c, 0x37, 0x84, 0x94, 0x79,
	0x51, 0x55, 0x39, 0xa9, 0x48, 0x4d, 0x1a, 0xde, 0x87, 0x66, 0x64, 0xc4, 0x2e, 0xbe, 0xa0, 0xcf,
	0x2b, 0x42, 0xca, 0xfb, 0xaa, 0x4a, 0x74, 0x03, 0x3d, 0xc2, 0xf9, 0xc9, 0x24, 0x31, 0x52, 0x86,
	0x56, 0x64, 0xc6, 0xe3, 0xbb, 0xeb, 0x79, 0xd1, 0xd2, 0xf9, 0xfb, 0x2b, 0xce, 0x35, 0x8a, 0xc7,
	0x27, 0x6e, 0x25, 0xb1, 0xd9, 0x0f, 0x03, 0x06, 0xba, 0x87, 0x3c, 0xb0, 0xb3, 0x34, 0x5b, 0x24,
	0xc1, 0x7f, 0x68, 0x0c, 0x90, 0xa5, 0xcb, 0x24, 0x5f, 0xa4, 0xcb, 0x34, 0x0b, 0x0c, 0x14, 0xc0,
	0x70, 0x99, 0x2c, 0xd7, 0xf8, 0xab, 0x56, 0xce, 0xd0, 0x39, 0xf8, 0x5f, 0x92, 0xed, 0x03, 0x4e,
	0x37, 0x59, 0xba, 0x5e, 0x05, 0xa6, 0xa0, 0xd3, 0xd5, 0x66, 0x97, 0x05, 0x16, 0x02, 0x70, 0xd6,
	0xbb, 0x4c, 0x9c, 0x6d, 0x41, 0x6e, 0xef, 0x97, 0x9b, 0x45, 0x92, 0xab, 0xae, 0x83, 0x2e, 0x60,
	0xa4, 0x15, 0x6d, 0x1a, 0x08, 0x60, 0xbb, 0xde, 0xe1, 0x87, 0x24, 0x70, 0x91, 0x0b, 0xd6, 0x63,
	0xba, 0xca, 0x02, 0x6f, 0xf6, 0xd3, 0x84, 0xcb, 0x37, 0xa3, 0xf4, 0x2d, 0x6b, 0x7a, 0xf2, 0x0f,
	0xeb, 0xb6, 0xde, 0xac, 0x7b, 0x02, 0x36, 0xa7, 0xbc, 0x22, 0x72, 0xbf, 0x1e, 0x56, 0x85, 0x48,
	0xe5, 0xb4, 0x26, 0x79, 0x45, 0x6b, 0xca, 0x43, 0x2b, 0x32, 0x62, 0x1b, 0x7b, 0x42, 0x59, 0x08,
	0x01, 0xdd, 0xc0, 0xb0, 0x26, 0x35, 0xeb, 0xbe, 0x6b, 0x83, 0x2d, 0x0d, 0xbe, 0xd2, 0x94, 0x65,
	0x02, 0x36, 0x6d, 0xda, 0x23, 0x0f, 0x1d, 0x95, 0x2b, 0x0b, 0x34, 0x05, 0x87, 0x1d, 0xb9, 0x90,
	0x07, 0x52, 0xd6, 0x95, 0x08, 0xec, 0x8b, 0xba, 0xad, 0x48, 0xae, 0x20, 0x57, 0x76, 0x7d, 0xa5,
	0xa5, 0x12, 0xfd, 0x00, 0x23, 0x6d, 0xd1, 0x09, 0x9e, 0xf4, 0x68, 0x6e, 0xad, 0x72, 0xa6, 0xe0,
	0xf4, 0xec, 0xd8, 0xed, 0x49, 0x78, 0xa9, 0xf2, 0x55, 0x85, 0x10, 0x58, 0x07, 0xda, 0xf0, 0xd0,
	0x97, 0xaa, 0x3c, 0xa3, 0xcf, 0xe0, 0x55, 0x45, 0xf3, 0x72, 0x2c, 0x5e, 0x48, 0x1f, 0x0e, 0x23,
	0x33, 0xf6, 0xef, 0x6e, 0xde, 0x7f, 0x31, 0x6a, 0xcd, 0xf3, 0x85, 0x76, 0xe2, 0xbf, 0x8c, 0x18,
	0x91, 0x74, 0x1d, 0xeb, 0xc2, 0x91, 0x1a, 0x51, 0x16, 0x57, 0x9f, 0xc0, 0x3d, 0x99, 0xd1, 0x15,
	0xb8, 0x27, 0xbb, 0x7c, 0x1a, 0x0f, 0xff, 0xa9, 0xc5, 0x95, 0xf6, 0xac, 0x24, 0xf2, 0x49, 0x6c,
	0x2c, 0xcf, 0x4f, 0x8e, 0xfc, 0xbd, 0x3e, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x07, 0xb8, 0x52,
	0x69, 0x78, 0x03, 0x00, 0x00,
}
